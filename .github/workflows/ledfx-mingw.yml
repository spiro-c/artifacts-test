# I am a workflow that demonstrates how to output the different context objects

name: Test aubio-Ledfx MinGW Build

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      name:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Person to greet'
        # Default value if no value is explicitly provided
        default: 'World'
        # Input has to be provided for the workflow to run
        required: true


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    name: Build aubio-Ledfx distribution 📦 on ${{ matrix.os }} with 🐍 Python ${{ matrix.python-version }} 
    runs-on: ${{ matrix.os }} # Use the 'os' variable from the matrix
    # defaults:
    #   run:
    #     shell: bash -x {0}  # Enable bash debugging for better logs
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest] # Define operating systems
        python-version: ["3.12"] # Define Python versions
        vcpkg_cache: ["c:\\vcpkg\\installed"]
    env:
      CIBW_BUILD: "cp310-* cp311-* cp312-* cp313-*"
      # VCPKG_ROOT: "C:/vcpkg"
      DEFAULT_PYTHON: 3.12
      # CFLAGS: "-O3"
    steps:
      - name: Checkout code from GitHub
        uses: actions/checkout@v5 # Checkout your repository
        with:
          repository: LedFx/aubio-ledfx
          ref: master

      - name: Cache vcpkg
        uses: actions/cache@v4
        id: vcpkgcache
        with:
          path: |
            ${{ matrix.vcpkg_cache }}
          # bump the last digit to avoid using previous build cache
          key: ${{ matrix.os }}-vcpkg--cache0

      - name: Update Path for Windows
        run: |
            "VCPKG_ROOT=C:\vcpkg" >> $env:GITHUB_ENV
            "VCPKG_DEFAULT_TRIPLET=x64-windows" >> $env:GITHUB_ENV
            "$env:VCPKG_ROOT" >> $env:GITHUB_PATH

      - name: Install vcpkg
        run: |
           vcpkg install pkgconf:x64-windows

      - name: Configure pkgconf for Windows
        if: runner.os == 'Windows'
        run: |
          # 1️⃣ Remove Strawberry Perl's pkg-config.bat from PATH
          $Env:PATH = ($Env:PATH -split ';' | Where-Object {$_ -notmatch 'Strawberry'}) -join ';'

          # 2️⃣ Try to locate pkgconf.exe in PATH
          $pkgconf = Get-Command pkgconf.exe -ErrorAction SilentlyContinue

          # 3️⃣ If not found, check common vcpkg locations
          if (-not $pkgconf) {
            $vcpkgRoot = $Env:VCPKG_ROOT
            $possiblePaths = @(
              (Join-Path $vcpkgRoot "downloads/tools/pkgconf/windows/pkgconf.exe"),
              (Join-Path $vcpkgRoot "installed/x64-windows/tools/pkgconf/pkgconf.exe"),
              (Join-Path $vcpkgRoot "installed/x64-windows/bin/pkgconf.exe")
            )

            foreach ($path in $possiblePaths) {
              if (Test-Path $path) {
                Write-Host "Found pkgconf.exe at: $path"
                $pkgconf = Get-Item $path
                break
              }
            }
          }

          # 4️⃣ If still not found, fail early
          if (-not $pkgconf) {
            Write-Host "❌ pkgconf.exe not found in PATH or vcpkg directories!"
            exit 1
          }

          # 5️⃣ Extract directory and add to PATH
          $pkgDir = Split-Path $pkgconf.FullName
          Write-Host "✅ Using pkgconf from: $pkgDir"
          echo $pkgDir | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append

          # 6️⃣ Create pkg-config.exe symlink for compatibility
          $linkPath = Join-Path $pkgDir 'pkg-config.exe'
          if (-not (Test-Path $linkPath)) {
            Write-Host "Linking pkg-config.exe → pkgconf.exe"
            New-Item -ItemType SymbolicLink -Path $linkPath -Target $pkgconf.FullName -Force | Out-Null
          } else {
            Write-Host "pkg-config.exe link already exists"
          }
      - name: Verify pkg-config
        run: pkg-config --version
      - uses: actions/setup-python@v6
        name: Install Setup Python for Build Tooling
        with:
            python-version: ${{ env.DEFAULT_PYTHON }}
            cache: 'pip' # caching pip dependencies
      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip build setuptools wheel cibuildwheel==2.* auditwheel delocate

      - name: vcpkg integration
        run: |
            vcpkg install fftw3:x64-windows
            vcpkg install ffmpeg[core,avcodec,avformat,swresample]:x64-windows
            vcpkg install pkgconf:x64-windows
            vcpkg install libsndfile[core]:x64-windows
            vcpkg install rubberband:x64-windows
            vcpkg install libflac:x64-windows
            vcpkg install libogg:x64-windows
            vcpkg install libvorbis:x64-windows
            vcpkg install pthreads:x64-windows
            vcpkg integrate install

      - name: Set up pkg-config
        run: |
          "$env:VCPKG_ROOT/installed/x64-windows/bin" >> $env:GITHUB_PATH
          "PKG_CONFIG_PATH=$env:VCPKG_ROOT/installed/x64-windows/lib/pkgconfig;$env:VCPKG_ROOT/installed/x64-windows/share/pkgconfig" >> $env:GITHUB_ENV

      # - name: Verify pkg-config
      #   run: pkg-config --version

      - name: Get Waf build system
        run: |
            curl -fsSL -o waf https://waf.io/waf-2.0.27
            chmod +x waf

      - name: Build Aubio
        run: |
          vcpkg integrate install
          python waf configure --with-target-platform=win64 --enable-rubberband --disable-docs --disable-tests --notests -v
      - name: Build Aubio
        run: |
          vcpkg integrate install
          python waf build -v
      - name: Build Aubio
        run: |
          vcpkg integrate install
          python waf install

      # - name: Build wheels with cibuildwheel
      #   env:
      #     CIBW_PRINT_BUILD_OUTPUT: 1
      #     # Export environment for builds so the python extension can find the staged libaubio
      #     # CIBW_ENVIRONMENT: 'PKG_CONFIG_PATH="$PWD/build/dist/usr/local/lib/pkgconfig:$PWD/build/dist/usr/local/lib64/pkgconfig:$PKG_CONFIG_PATH" CFLAGS="-I$PWD/build/dist/usr/local/include:$CFLAGS" LDFLAGS="-L$PWD/build/dist/usr/local/lib -L$PWD/build/dist/usr/local/lib64 -Wl,-rpath,$PWD/build/dist/usr/local/lib -Wl,-rpath,$PWD/build/dist/usr/local/lib64:$LDFLAGS" LD_LIBRARY_PATH="$PWD/build/dist/usr/local/lib:$PWD/build/dist/usr/local/lib64:$LD_LIBRARY_PATH"'
      #   run: |
      #     export CYGPATH=$(cygpath -m /)
      #     python -m cibuildwheel --output-dir dist
      # - name: Upload wheels
      #   uses: actions/upload-artifact@v4
      #   with:
      #     path: dist/
#   build-sdist:
#     name: >-
#       Build aubio-Ledfx sdist 📦
#     runs-on: ubuntu-latest
#     env:
#       DEFAULT_PYTHON: 3.12
#     steps:
#       - name: Checkout code from GitHub
#         uses: actions/checkout@v5 # Checkout your repository
#         with:
#           repository: LedFx/aubio-ledfx
#           ref: master
    
#       - name: Install uv
#         uses: astral-sh/setup-uv@v7 # Action to set up uv
#         with:
#           enable-cache: true      
    
#       - name: Set up 🐍 Python ${{ env.DEFAULT_PYTHON }}
#         run: uv python install ${{ env.DEFAULT_PYTHON }} # Action to set up Python

#       - name: Build a binary wheel and a source tarball
#         run: uv build --sdist --force-pep517 # Command to build the package
    
#       - name: Store the distribution packages with 🐍 Python ${{ env.DEFAULT_PYTHON }}
#         uses: actions/upload-artifact@v4
#         with:
#             name: python-package-distributions-sdist
#             path: dist/

#   publish-to-pypi:
#     name: >-
#       Publish Python 🐍 distribution 📦 to PyPI
# #    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
#     needs: [build, build-sdist]
#     runs-on: ubuntu-latest
#     environment:
#       name: pypi
#       url: https://pypi.org/p/<package-name>  # Replace <package-name> with your PyPI project name
#     permissions:
#       id-token: write  # IMPORTANT: mandatory for trusted publishing

#     steps:
#     - name: Download all the dists
#       uses: actions/download-artifact@v5
#       with:
#         pattern: python-package-distributions-*
#         path: dist/
#         merge-multiple: true
#     # - name: Publish distribution 📦 to PyPI
#     #   uses: pypa/gh-action-pypi-publish@release/v1
#     - name: List files in dist/
#       run: ls -la dist/
