name: Build LedFx on Gh

on:
  workflow_dispatch:

jobs:
  build-cache:
    name: Build Cache
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -x {0}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.11']
    steps:
      - name: Checkout code from GitHub
        uses: actions/checkout@v3
        with:
          repository: LedFx/LedFx
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # - name: Get pip cache dir
      #   id: pip-cache
      #   run: |
      #     echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      - name: Cache venv
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: |
            venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}

      - name: Create Virtual environment
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python3 -m venv venv
  
      - name: Set Variables
        id: set-vars
        run: |
          if [ ${{ runner.os }} = "Windows" ]; then
            source venv/Scripts/activate
          else
            source venv/bin/activate
          fi
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
          python --version
          which python3
          echo "action_state=$(python3 ledfx/consts.py)" >> $GITHUB_ENV
          BINARY_NAME=LedFx-${{ runner.os }}
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV
          echo "VIRTUAL_PATH=$VIRTUAL_ENV" >> $GITHUB_ENV

      - name: Cache pip
        id: cache-pip
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.set-vars.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        if: steps.cache-pip.outputs.cache-hit != 'true'
        run: |
          if [ ${{ runner.os }} = "Windows" ]; then
            source venv/Scripts/activate
          else
            source venv/bin/activate
          fi
          python3 -m pip install -r requirements.txt pyinstaller
          python3 -m pip install -e .

###### Windows build core and portable

  build-windows:
    name: ${{ matrix.name }}
    env:
      cmake_build_type: Release
    needs: build-cache
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -x {0}
    strategy:
      matrix:
        include:
          - name: Build Windows Core and Portable
            python-version: 3.11
            os: windows-latest
            install_dir: C:/portaudio
            vcpkg_triplet: x64-mingw-static
            cmake_generator: "MinGW Makefiles"
            # ASIO_SDK_ZIP_PATH needs to be quoted or CMake will save the download to
            # asiosdk instead of asiosdk.zip.
            asio_sdk_cache_path: "asiosdk.zip"
            # Somehow CMake fails to find the toolchain file if a relative path is used on Windows.
            cmake_options:
              -DPA_USE_ASIO=ON
              -DPA_BUILD_SHARED_LIBS=ON
              -DASIO_SDK_ZIP_PATH="asiosdk.zip"
              -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake
    steps:
      - name: Checkout LedFx code from GitHub
        uses: actions/checkout@v3
        with:
          repository: LedFx/LedFx
          ref: main

      - name: Checkout code from GitHub
        uses: actions/checkout@v3
        with:
          path: tools
      - name: Checkout Portaudio code from GitHub
        uses: actions/checkout@v3
        with:
          repository: PortAudio/portaudio
          # Current working portaudio source
          ref: cb8d3dcbc6fa74c67f3e236be89b12d5630da141
          path: portaudio

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v7
        if: ${{ matrix.vcpkg_triplet }} != null
        with:
          vcpkgTriplet: ${{ matrix.vcpkg_triplet }}
          appendedCacheKey: ${{ hashFiles( '**/vcpkg.json' ) }}
          additionalCachedPaths: build/vcpkg_installed
          vcpkgGitCommitId: f30786c9c4c901f21a13e2d524349e39cc359a90
          # Required when using vcpkg.json manifest in repository
          setupOnly: true

      - name: configure
        run: cmake
            -G "${{ matrix.cmake_generator }}"
            ${{ matrix.cmake_options }}
            -DCMAKE_INSTALL_PREFIX=${{ matrix.install_dir }}
            -DCMAKE_BUILD_TYPE=${{ env.cmake_build_type }}
            -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_triplet }}
            -DPA_USE_SKELETON=ON
            -DPA_WARNINGS_ARE_ERRORS=ON
            -S portaudio
            -B portaudio/build
      - name: build
        run: cmake --build portaudio/build --config ${{ env.cmake_build_type }} --parallel 2
      - name: install
        run: | 
          cmake --install portaudio/build --config ${{ env.cmake_build_type }}
          ls -Rla ${{ matrix.install_dir }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache venv
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: |
            venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}


      # Recreate Virtual environment if cache is missing
      - name: Create Virtual environment
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python3 -m venv venv
          source venv/Scripts/activate

      - name: Set Variables
        id: set-vars
        run: |
          source venv/Scripts/activate
          python3 -m pip install -r requirements.txt 
          python3 -m pip install pyinstaller
          python3 -m pip install -e .
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
          python --version
          which python3
          echo "action_state=$(python3 ledfx/consts.py)" >> $GITHUB_ENV
          BINARY_NAME=LedFx-${{ runner.os }}
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV
          mv $VIRTUAL_ENV/lib/site-packages/_sounddevice_data/portaudio-binaries/libportaudio64bit.dll $VIRTUAL_ENV/lib/site-packages/_sounddevice_data/portaudio-binaries/libportaudio64bit-old.dll
          mv ${{ matrix.install_dir }}/bin/libportaudio.dll $VIRTUAL_ENV/lib/site-packages/_sounddevice_data/portaudio-binaries/libportaudio64bit.dll
      - name: Cache pip
        id: cache-pip
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.set-vars.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
             

      - name: Build ${{ env.BINARY_NAME }} core ${{ env.action_state }}
        run: |
          source venv/Scripts/activate
          cp tools/hook-samplerate.py $VIRTUAL_ENV/lib/site-packages/_pyinstaller_hooks_contrib/hooks/stdhooks/hook-samplerate.py
          cp tools/win.spec win.spec
          pyinstaller win.spec
          cp -r dist/LedFx $BINARY_NAME-$action_state
          7z.exe a -tzip $BINARY_NAME-core-$action_state.zip $BINARY_NAME-$action_state "-mx5" "-xr!.git" "-xr!.github"

      - name: Upload ${{ env.BINARY_NAME }} core ${{ env.action_state }}
        uses: actions/upload-artifact@v3
        with:
            name: ${{ env.BINARY_NAME }}-core-${{ env.action_state }}
            path: ${{ env.BINARY_NAME }}-core-${{ env.action_state }}.zip

      - name: Build ${{ env.BINARY_NAME }} console ${{ env.action_state }}
        run: |
          source venv/Scripts/activate
          cp tools/hook-samplerate.py $VIRTUAL_ENV/lib/site-packages/_pyinstaller_hooks_contrib/hooks/stdhooks/hook-samplerate.py
          cp tools/win-console.spec win-console.spec
          pyinstaller win-console.spec
          cp -r dist/LedFx-console $BINARY_NAME-console-$action_state
          7z.exe a -tzip $BINARY_NAME-console-$action_state.zip $BINARY_NAME-console-$action_state "-mx5" "-xr!.git" "-xr!.github"

      - name: Upload ${{ env.BINARY_NAME }} console ${{ env.action_state }}
        uses: actions/upload-artifact@v3
        with:
            name: ${{ env.BINARY_NAME }}-console-${{ env.action_state }}
            path: ${{ env.BINARY_NAME }}-console-${{ env.action_state }}.zip

      - name: Build ${{ env.BINARY_NAME }} portable ${{ env.action_state }}
        run: |
          source venv/Scripts/activate
          cp tools/hook-samplerate.py $VIRTUAL_ENV/lib/site-packages/_pyinstaller_hooks_contrib/hooks/stdhooks/hook-samplerate.py
          cp tools/win-portable.spec win-portable.spec
          pyinstaller win-portable.spec
          ls dist/
          cp dist/LedFx.exe $BINARY_NAME-portable-$action_state.exe


      - name: Upload ${{ env.BINARY_NAME }} portable ${{ env.action_state }}
        uses: actions/upload-artifact@v3
        with:
            name: ${{ env.BINARY_NAME }}-portable-${{ env.action_state }}
            path: ${{ env.BINARY_NAME }}-portable-${{ env.action_state }}.exe

###### macOS build core
  build-macos:
    name: ${{ matrix.name }}
    needs: build-cache
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -x {0}
    strategy:
      matrix:
        include:
          - name: Build macOS Core
            python-version: 3.11
            os: macos-latest

    steps:
      - name: Checkout LedFx code from GitHub
        uses: actions/checkout@v3
        with:
          repository: LedFx/LedFx
          ref: main

      - name: Checkout code from GitHub
        uses: actions/checkout@v3
        with:
          path: tools

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache venv
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: |
            venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}


      # Recreate Virtual environment if cache is missing
      - name: Create Virtual environment
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python3 -m venv venv
          source venv/bin/activate

      - name: Set Variables
        id: set-vars
        run: |
          source venv/bin/activate
          python3 -m pip install -r requirements.txt 
          python3 -m pip install pyinstaller
          python3 -m pip install -e .
          python3 -m pip uninstall -y && python3 -m pip install Pillow==9.5.0
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
          python --version
          which python3
          echo "action_state=$(python3 ledfx/consts.py)" >> $GITHUB_ENV
          BINARY_NAME=LedFx-${{ runner.os }}
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV

      - name: Cache pip
        id: cache-pip
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.set-vars.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
             

      - name: Build ${{ env.BINARY_NAME }} core ${{ env.action_state }}
        run: |
          source venv/bin/activate
          # Notworking on mac
          cp tools/hook-samplerate.py $VIRTUAL_ENV/lib/python3.11/site-packages/_pyinstaller_hooks_contrib/hooks/stdhooks/hook-samplerate.py
          cp tools/mac.spec mac.spec
          pyinstaller mac.spec
          #mkdir -p dist/LedFx_v2/Contents/MacOS/samplerate/_samplerate_data
          #cp $VIRTUAL_ENV/lib/python3.11/site-packages/samplerate/_samplerate_data/libsamplerate.dylib dist/LedFx_v2/Contents/MacOS/samplerate/_samplerate_data
          chmod +x dist/LedFx_v2/Contents/MacOS/LedFx_v2
          ls -la dist/
          cp -r dist/LedFx_v2 ./LedFx.app
          tar -czf $BINARY_NAME-core-$action_state.tar ./LedFx.app

      - name: Upload ${{ env.BINARY_NAME }} core ${{ env.action_state }}
        uses: actions/upload-artifact@v3
        with:
            name: ${{ env.BINARY_NAME }}-core-${{ env.action_state }}
            path: ${{ env.BINARY_NAME }}-core-${{ env.action_state }}.tar
