name: Build LedFx on Gh

on:
  workflow_dispatch:

jobs:
  build-cache:
    name: Build Cache
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -x {0}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.11']
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3
        with:
          repository: LedFx/LedFx
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      - name: Cache venv
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: |
            venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}

      - name: Cache pip
        id: cache-pip
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Create Virtual environment
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python3 -m venv venv
  
      - name: Display Python version
        run: |
          if [ ${{ runner.os }} = "Windows" ]; then
            source venv/Scripts/activate
          else
            source venv/bin/activate
          fi
          python --version
          which python3
          echo "action_state=$(python3 ledfx/consts.py)" >> $GITHUB_ENV
          BINARY_NAME=LedFx-${{ runner.os }}
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV
          echo "VIRTUAL_PATH=$VIRTUAL_ENV" >> $GITHUB_ENV
          
      - name: Install dependencies
        if: steps.cache-pip.outputs.cache-hit != 'true'
        run: |
          if [ ${{ runner.os }} = "Windows" ]; then
            source venv/Scripts/activate
          else
            source venv/bin/activate
          fi
          python3 -m pip install -r requirements.txt pyinstaller
          python3 -m pip install -e .
          python3 setup.py develop

      - name: Portaudio dependency for windows
        if: startsWith(runner.os, 'Windows') 
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: |
              git
              zip
              unzip
              base-devel
              mingw-w64-x86_64-gcc
              mingw-w64-x86_64-cmake
              mingw-w64-x86_64-ninja

      - name: Build portaudio
        if: startsWith(runner.os, 'Windows')
        shell: msys2 {0}
        run: |
          if [ ${{ runner.os }} = "Windows" ]; then
            source venv/Scripts/activate
          else
            source venv/bin/activate
          fi
          echo $VIRTUAL_PATH
          export CYGPATH=$(cygpath -m /)
          git clone https://github.com/portaudio/portaudio
          cmake -B portaudio/.build -S portaudio -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} -DPA_BUILD_SHARED_LIBS=on -DCMAKE_BUILD_TYPE=Release -DPA_USE_ASIO=on
          cmake --build portaudio/.build/
          cmake --install portaudio/.build/
          rm -rf portaudio
          mv $CYGPATH/mingw64/bin/libportaudio.dll $VIRTUAL_PATH/lib/site-packages/_sounddevice_data/portaudio-binaries/libportaudio64bit.dll
  build-core:
    name: Build Core
    needs: build-cache
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -x {0}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.11']
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3
        with:
          repository: LedFx/LedFx
          ref: main
      - name: Check out code from GitHub
        uses: actions/checkout@v3
        with:
          path: tools
      - name: Cache venv
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: |
            venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}

      - name: Cache pip
        id: cache-pip
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Display Python version
        run: |
          if [ ${{ runner.os }} = "Windows" ]; then
            source venv/Scripts/activate
          else
            source venv/bin/activate
          fi
          python --version
          which python3
          echo "action_state=$(python3 ledfx/consts.py)" >> $GITHUB_ENV
          BINARY_NAME=LedFx-${{ runner.os }}
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV
          echo "VIRTUAL_PATH=$VIRTUAL_ENV" >> $GITHUB_ENV

      - name: Build ${{ env.BINARY_NAME }} core ${{ env.action_state }}
        if: startsWith(runner.os, 'Windows')
        run: |
          mv tools/hook-samplerate.py $VIRTUAL_PATH/lib/site-packages/_pyinstaller_hooks_contrib/hooks/stdhooks/hook-samplerate.py
          pyinstaller win.spec \
          && \
          7z.exe a -tzip $BINARY_NAME-core-$action_state.zip dist/LedFx "-mx5" "-xr!.git" "-xr!.github"

      - name: Upload ${{ env.BINARY_NAME }} core ${{ env.action_state }}
        if: startsWith(runner.os, 'Windows')
        uses: actions/upload-artifact@v3
        with:
            name: ${{ env.BINARY_NAME }}-core-${{ env.action_state }}
            path: ${{ env.BINARY_NAME }}-core-${{ env.action_state }}.zip

      - name: Build ${{ env.BINARY_NAME }} portable ${{ env.action_state }}
        if: startsWith(runner.os, 'Windows')
        run: |
            pyinstaller win-portable.spec
            ls dist/
            mv dist/LedFx.exe $BINARY_NAME-portable-$action_state.exe


      - name: Upload ${{ env.BINARY_NAME }} portable ${{ env.action_state }}
        if: startsWith(runner.os, 'Windows')
        uses: actions/upload-artifact@v3
        with:
            name: ${{ env.BINARY_NAME }}-portable-${{ env.action_state }}
            path: ${{ env.BINARY_NAME }}-portable-${{ env.action_state }}.exe
